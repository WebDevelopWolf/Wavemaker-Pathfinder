

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "wm-api\Web.config"
//     Connection String Name: "PathV1Context"
//     Connection String:      "Data Source=WEBDEVWOLF-LAPT\SQLEXPRESS;Initial Catalog=path-v1-test;Persist Security Info=True;User ID=wmsite;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Express Edition (64-bit)
// Database Engine Edition : Express
// Database Version        : 13.0.4223.10

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace wm_api.Models
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Badge> Badges { get; set; } // Badges
        System.Data.Entity.DbSet<Challenge> Challenges { get; set; } // Challenges
        System.Data.Entity.DbSet<FeedbackPost> FeedbackPosts { get; set; } // FeedbackPosts
        System.Data.Entity.DbSet<FeedbackPostResponse> FeedbackPostResponses { get; set; } // FeedbackPostResponse
        System.Data.Entity.DbSet<FeedbackResponse> FeedbackResponses { get; set; } // FeedbackResponse
        System.Data.Entity.DbSet<Journey> Journeys { get; set; } // Journeys
        System.Data.Entity.DbSet<Lesson> Lessons { get; set; } // Lessons
        System.Data.Entity.DbSet<LessonResource> LessonResources { get; set; } // LessonResources
        System.Data.Entity.DbSet<QuestionAnswer> QuestionAnswers { get; set; } // QuestionAnswers
        System.Data.Entity.DbSet<QuizQuestion> QuizQuestions { get; set; } // QuizQuestions
        System.Data.Entity.DbSet<QuizResult> QuizResults { get; set; } // QuizResults
        System.Data.Entity.DbSet<Quizze> Quizzes { get; set; } // Quizzes
        System.Data.Entity.DbSet<Resource> Resources { get; set; } // Resources
        System.Data.Entity.DbSet<User> Users { get; set; } // Users
        System.Data.Entity.DbSet<UserBadge> UserBadges { get; set; } // UserBadges
        System.Data.Entity.DbSet<UserChallenge> UserChallenges { get; set; } // UserChallenges
        System.Data.Entity.DbSet<UserJourney> UserJourneys { get; set; } // UserJourneys

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<Badge> Badges { get; set; } // Badges
        public System.Data.Entity.DbSet<Challenge> Challenges { get; set; } // Challenges
        public System.Data.Entity.DbSet<FeedbackPost> FeedbackPosts { get; set; } // FeedbackPosts
        public System.Data.Entity.DbSet<FeedbackPostResponse> FeedbackPostResponses { get; set; } // FeedbackPostResponse
        public System.Data.Entity.DbSet<FeedbackResponse> FeedbackResponses { get; set; } // FeedbackResponse
        public System.Data.Entity.DbSet<Journey> Journeys { get; set; } // Journeys
        public System.Data.Entity.DbSet<Lesson> Lessons { get; set; } // Lessons
        public System.Data.Entity.DbSet<LessonResource> LessonResources { get; set; } // LessonResources
        public System.Data.Entity.DbSet<QuestionAnswer> QuestionAnswers { get; set; } // QuestionAnswers
        public System.Data.Entity.DbSet<QuizQuestion> QuizQuestions { get; set; } // QuizQuestions
        public System.Data.Entity.DbSet<QuizResult> QuizResults { get; set; } // QuizResults
        public System.Data.Entity.DbSet<Quizze> Quizzes { get; set; } // Quizzes
        public System.Data.Entity.DbSet<Resource> Resources { get; set; } // Resources
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users
        public System.Data.Entity.DbSet<UserBadge> UserBadges { get; set; } // UserBadges
        public System.Data.Entity.DbSet<UserChallenge> UserChallenges { get; set; } // UserChallenges
        public System.Data.Entity.DbSet<UserJourney> UserJourneys { get; set; } // UserJourneys

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=PathV1Context")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BadgeConfiguration());
            modelBuilder.Configurations.Add(new ChallengeConfiguration());
            modelBuilder.Configurations.Add(new FeedbackPostConfiguration());
            modelBuilder.Configurations.Add(new FeedbackPostResponseConfiguration());
            modelBuilder.Configurations.Add(new FeedbackResponseConfiguration());
            modelBuilder.Configurations.Add(new JourneyConfiguration());
            modelBuilder.Configurations.Add(new LessonConfiguration());
            modelBuilder.Configurations.Add(new LessonResourceConfiguration());
            modelBuilder.Configurations.Add(new QuestionAnswerConfiguration());
            modelBuilder.Configurations.Add(new QuizQuestionConfiguration());
            modelBuilder.Configurations.Add(new QuizResultConfiguration());
            modelBuilder.Configurations.Add(new QuizzeConfiguration());
            modelBuilder.Configurations.Add(new ResourceConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserBadgeConfiguration());
            modelBuilder.Configurations.Add(new UserChallengeConfiguration());
            modelBuilder.Configurations.Add(new UserJourneyConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BadgeConfiguration(schema));
            modelBuilder.Configurations.Add(new ChallengeConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackPostConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackPostResponseConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackResponseConfiguration(schema));
            modelBuilder.Configurations.Add(new JourneyConfiguration(schema));
            modelBuilder.Configurations.Add(new LessonConfiguration(schema));
            modelBuilder.Configurations.Add(new LessonResourceConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionAnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new QuizQuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new QuizResultConfiguration(schema));
            modelBuilder.Configurations.Add(new QuizzeConfiguration(schema));
            modelBuilder.Configurations.Add(new ResourceConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserBadgeConfiguration(schema));
            modelBuilder.Configurations.Add(new UserChallengeConfiguration(schema));
            modelBuilder.Configurations.Add(new UserJourneyConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class MyDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<Badge> Badges { get; set; }
        public System.Data.Entity.DbSet<Challenge> Challenges { get; set; }
        public System.Data.Entity.DbSet<FeedbackPost> FeedbackPosts { get; set; }
        public System.Data.Entity.DbSet<FeedbackPostResponse> FeedbackPostResponses { get; set; }
        public System.Data.Entity.DbSet<FeedbackResponse> FeedbackResponses { get; set; }
        public System.Data.Entity.DbSet<Journey> Journeys { get; set; }
        public System.Data.Entity.DbSet<Lesson> Lessons { get; set; }
        public System.Data.Entity.DbSet<LessonResource> LessonResources { get; set; }
        public System.Data.Entity.DbSet<QuestionAnswer> QuestionAnswers { get; set; }
        public System.Data.Entity.DbSet<QuizQuestion> QuizQuestions { get; set; }
        public System.Data.Entity.DbSet<QuizResult> QuizResults { get; set; }
        public System.Data.Entity.DbSet<Quizze> Quizzes { get; set; }
        public System.Data.Entity.DbSet<Resource> Resources { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserBadge> UserBadges { get; set; }
        public System.Data.Entity.DbSet<UserChallenge> UserChallenges { get; set; }
        public System.Data.Entity.DbSet<UserJourney> UserJourneys { get; set; }

        public FakeMyDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Badges = new FakeDbSet<Badge>("BadgeId");
            Challenges = new FakeDbSet<Challenge>("ChallengeId");
            FeedbackPosts = new FakeDbSet<FeedbackPost>("PostId");
            FeedbackPostResponses = new FakeDbSet<FeedbackPostResponse>("FeedbackPostResponseId");
            FeedbackResponses = new FakeDbSet<FeedbackResponse>("FeedbackResponseId");
            Journeys = new FakeDbSet<Journey>("JourneyId");
            Lessons = new FakeDbSet<Lesson>("LessonId");
            LessonResources = new FakeDbSet<LessonResource>("LessonResourceId");
            QuestionAnswers = new FakeDbSet<QuestionAnswer>("QuestionAnswerId");
            QuizQuestions = new FakeDbSet<QuizQuestion>("QuestionId");
            QuizResults = new FakeDbSet<QuizResult>("QuizResultId");
            Quizzes = new FakeDbSet<Quizze>("QuizId");
            Resources = new FakeDbSet<Resource>("ResourceId");
            Users = new FakeDbSet<User>("UserId");
            UserBadges = new FakeDbSet<UserBadge>("UserBadgeId");
            UserChallenges = new FakeDbSet<UserChallenge>("UserChallengeId");
            UserJourneys = new FakeDbSet<UserJourney>("UserJourneyId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Badges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Badge
    {
        public System.Guid BadgeId { get; set; } // BadgeId (Primary key)
        public string BadgeImage { get; set; } // BadgeImage (length: 150)
        public string BadgeTitle { get; set; } // BadgeTitle (length: 50)
        public string BadgeText { get; set; } // BadgeText (length: 150)
        public System.Guid? ChallengeId { get; set; } // ChallengeId
        public System.Guid? LessonId { get; set; } // LessonId
        public System.Guid? JourneyId { get; set; } // JourneyId
    }

    // Challenges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Challenge
    {
        public System.Guid ChallengeId { get; set; } // ChallengeId (Primary key)
        public string ChallengeInstructions { get; set; } // ChallengeInstructions
        public System.Guid LessonId { get; set; } // LessonId
    }

    // FeedbackPosts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FeedbackPost
    {
        public System.Guid PostId { get; set; } // PostId (Primary key)
        public string PostMedia { get; set; } // PostMedia (length: 100)
        public string PostMediaType { get; set; } // PostMediaType (length: 1)
        public int PostLikes { get; set; } // PostLikes
        public System.Guid ChallengeId { get; set; } // ChallengeId
    }

    // FeedbackPostResponse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FeedbackPostResponse
    {
        public System.Guid FeedbackPostResponseId { get; set; } // FeedbackPostResponseId (Primary key)
        public System.Guid ResponseId { get; set; } // ResponseId
        public System.Guid PostId { get; set; } // PostId
    }

    // FeedbackResponse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FeedbackResponse
    {
        public System.Guid FeedbackResponseId { get; set; } // FeedbackResponseId (Primary key)
        public string FeedbackText { get; set; } // FeedbackText (length: 150)
    }

    // Journeys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Journey
    {
        public System.Guid JourneyId { get; set; } // JourneyId (Primary key)
        public string JourneyTitle { get; set; } // JourneyTitle (length: 50)
        public string JourneyDescription { get; set; } // JourneyDescription (length: 250)
        public string JourneyVideo { get; set; } // JourneyVideo (length: 100)
        public string JourneyRewards { get; set; } // JourneyRewards (length: 200)
        public string JourneyCompletionTime { get; set; } // JourneyCompletionTime (length: 10)
        public System.Guid RelatedJourneyId { get; set; } // RelatedJourneyId
        public string JourneyGains { get; set; } // JourneyGains (length: 200)
        public int XpReward { get; set; } // XpReward
    }

    // Lessons
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Lesson
    {
        public System.Guid LessonId { get; set; } // LessonId (Primary key)
        public string LessonTitle { get; set; } // LessonTitle (length: 50)
        public string LessonDescription { get; set; } // LessonDescription (length: 250)
        public string LessonVideo { get; set; } // LessonVideo (length: 100)
        public string LessonReward { get; set; } // LessonReward (length: 200)
        public string LessonCompletionTime { get; set; } // LessonCompletionTime (length: 10)
        public string LessonGains { get; set; } // LessonGains (length: 200)
        public int? XpReward { get; set; } // XpReward
    }

    // LessonResources
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class LessonResource
    {
        public System.Guid LessonResourceId { get; set; } // LessonResourceId (Primary key)
        public System.Guid ResourceId { get; set; } // ResourceId
        public System.Guid LessonId { get; set; } // LessonId
    }

    // QuestionAnswers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class QuestionAnswer
    {
        public System.Guid QuestionAnswerId { get; set; } // QuestionAnswerId (Primary key)
        public System.Guid QuestionId { get; set; } // QuestionId
        public string Answer { get; set; } // Answer (length: 100)
        public string CorrectAnswer { get; set; } // CorrectAnswer (length: 1)
        public string AnswerAdvice { get; set; } // AnswerAdvice (length: 100)
    }

    // QuizQuestions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class QuizQuestion
    {
        public System.Guid QuestionId { get; set; } // QuestionId (Primary key)
        public System.Guid QuizId { get; set; } // QuizId
        public string QuestionText { get; set; } // QuestionText (length: 150)
        public int QuestionScoreValue { get; set; } // QuestionScoreValue
    }

    // QuizResults
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class QuizResult
    {
        public System.Guid QuizResultId { get; set; } // QuizResultId (Primary key)
        public System.Guid? QuizId { get; set; } // QuizId
        public System.Guid? UserId { get; set; } // UserId
        public int? QuizResultScore { get; set; } // QuizResultScore
        public string QuizResultPass { get; set; } // QuizResultPass (length: 1)
    }

    // Quizzes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Quizze
    {
        public System.Guid QuizId { get; set; } // QuizId (Primary key)
        public System.Guid LessonId { get; set; } // LessonId
        public string QuizTitle { get; set; } // QuizTitle (length: 100)
        public string QuizInstructions { get; set; } // QuizInstructions
        public string QuizTest { get; set; } // QuizTest (length: 1)
        public int QuizPassMark { get; set; } // QuizPassMark
    }

    // Resources
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Resource
    {
        public System.Guid ResourceId { get; set; } // ResourceId (Primary key)
        public string ResourceName { get; set; } // ResourceName (length: 50)
        public string ResourceType { get; set; } // ResourceType (length: 1)
        public string ResourceDescription { get; set; } // ResourceDescription (length: 250)
        public System.Guid JourneyId { get; set; } // JourneyId
        public System.Guid LessonId { get; set; } // LessonId
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class User
    {
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string Username { get; set; } // Username (length: 50)
        public string UserTitle { get; set; } // UserTitle (length: 100)
        public string UserBio { get; set; } // UserBio
        public string UserAspirations { get; set; } // UserAspirations
        public string UserInspirations { get; set; } // UserInspirations
        public int UserXp { get; set; } // UserXp
        public int UserLevel { get; set; } // UserLevel
    }

    // UserBadges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class UserBadge
    {
        public System.Guid UserBadgeId { get; set; } // UserBadgeId (Primary key)
        public System.Guid BadgeId { get; set; } // BadgeId
        public System.Guid UserId { get; set; } // UserId
    }

    // UserChallenges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class UserChallenge
    {
        public System.Guid UserChallengeId { get; set; } // UserChallengeId (Primary key)
        public System.Guid ChallengeId { get; set; } // ChallengeId
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime DateComplete { get; set; } // DateComplete
    }

    // UserJourneys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class UserJourney
    {
        public System.Guid UserJourneyId { get; set; } // UserJourneyId (Primary key)
        public System.Guid UserId { get; set; } // UserId
        public System.Guid JourneyId { get; set; } // JourneyId
        public System.Guid LessonProgressId { get; set; } // LessonProgressId
    }

    #endregion

    #region POCO Configuration

    // Badges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class BadgeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Badge>
    {
        public BadgeConfiguration()
            : this("dbo")
        {
        }

        public BadgeConfiguration(string schema)
        {
            ToTable("Badges", schema);
            HasKey(x => x.BadgeId);

            Property(x => x.BadgeId).HasColumnName(@"BadgeId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BadgeImage).HasColumnName(@"BadgeImage").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.BadgeTitle).HasColumnName(@"BadgeTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.BadgeText).HasColumnName(@"BadgeText").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.ChallengeId).HasColumnName(@"ChallengeId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.LessonId).HasColumnName(@"LessonId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.JourneyId).HasColumnName(@"JourneyId").HasColumnType("uniqueidentifier").IsOptional();
        }
    }

    // Challenges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ChallengeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Challenge>
    {
        public ChallengeConfiguration()
            : this("dbo")
        {
        }

        public ChallengeConfiguration(string schema)
        {
            ToTable("Challenges", schema);
            HasKey(x => x.ChallengeId);

            Property(x => x.ChallengeId).HasColumnName(@"ChallengeId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ChallengeInstructions).HasColumnName(@"ChallengeInstructions").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.LessonId).HasColumnName(@"LessonId").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // FeedbackPosts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FeedbackPostConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FeedbackPost>
    {
        public FeedbackPostConfiguration()
            : this("dbo")
        {
        }

        public FeedbackPostConfiguration(string schema)
        {
            ToTable("FeedbackPosts", schema);
            HasKey(x => x.PostId);

            Property(x => x.PostId).HasColumnName(@"PostId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostMedia).HasColumnName(@"PostMedia").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.PostMediaType).HasColumnName(@"PostMediaType").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            Property(x => x.PostLikes).HasColumnName(@"PostLikes").HasColumnType("int").IsRequired();
            Property(x => x.ChallengeId).HasColumnName(@"ChallengeId").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // FeedbackPostResponse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FeedbackPostResponseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FeedbackPostResponse>
    {
        public FeedbackPostResponseConfiguration()
            : this("dbo")
        {
        }

        public FeedbackPostResponseConfiguration(string schema)
        {
            ToTable("FeedbackPostResponse", schema);
            HasKey(x => x.FeedbackPostResponseId);

            Property(x => x.FeedbackPostResponseId).HasColumnName(@"FeedbackPostResponseId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ResponseId).HasColumnName(@"ResponseId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.PostId).HasColumnName(@"PostId").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // FeedbackResponse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FeedbackResponseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FeedbackResponse>
    {
        public FeedbackResponseConfiguration()
            : this("dbo")
        {
        }

        public FeedbackResponseConfiguration(string schema)
        {
            ToTable("FeedbackResponse", schema);
            HasKey(x => x.FeedbackResponseId);

            Property(x => x.FeedbackResponseId).HasColumnName(@"FeedbackResponseId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FeedbackText).HasColumnName(@"FeedbackText").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
        }
    }

    // Journeys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class JourneyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Journey>
    {
        public JourneyConfiguration()
            : this("dbo")
        {
        }

        public JourneyConfiguration(string schema)
        {
            ToTable("Journeys", schema);
            HasKey(x => x.JourneyId);

            Property(x => x.JourneyId).HasColumnName(@"JourneyId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.JourneyTitle).HasColumnName(@"JourneyTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JourneyDescription).HasColumnName(@"JourneyDescription").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.JourneyVideo).HasColumnName(@"JourneyVideo").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.JourneyRewards).HasColumnName(@"JourneyRewards").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.JourneyCompletionTime).HasColumnName(@"JourneyCompletionTime").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10);
            Property(x => x.RelatedJourneyId).HasColumnName(@"RelatedJourneyId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.JourneyGains).HasColumnName(@"JourneyGains").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.XpReward).HasColumnName(@"XpReward").HasColumnType("int").IsRequired();
        }
    }

    // Lessons
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class LessonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Lesson>
    {
        public LessonConfiguration()
            : this("dbo")
        {
        }

        public LessonConfiguration(string schema)
        {
            ToTable("Lessons", schema);
            HasKey(x => x.LessonId);

            Property(x => x.LessonId).HasColumnName(@"LessonId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LessonTitle).HasColumnName(@"LessonTitle").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.LessonDescription).HasColumnName(@"LessonDescription").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.LessonVideo).HasColumnName(@"LessonVideo").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.LessonReward).HasColumnName(@"LessonReward").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.LessonCompletionTime).HasColumnName(@"LessonCompletionTime").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.LessonGains).HasColumnName(@"LessonGains").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.XpReward).HasColumnName(@"XpReward").HasColumnType("int").IsOptional();
        }
    }

    // LessonResources
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class LessonResourceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LessonResource>
    {
        public LessonResourceConfiguration()
            : this("dbo")
        {
        }

        public LessonResourceConfiguration(string schema)
        {
            ToTable("LessonResources", schema);
            HasKey(x => x.LessonResourceId);

            Property(x => x.LessonResourceId).HasColumnName(@"LessonResourceId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ResourceId).HasColumnName(@"ResourceId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.LessonId).HasColumnName(@"LessonId").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // QuestionAnswers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class QuestionAnswerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionAnswer>
    {
        public QuestionAnswerConfiguration()
            : this("dbo")
        {
        }

        public QuestionAnswerConfiguration(string schema)
        {
            ToTable("QuestionAnswers", schema);
            HasKey(x => x.QuestionAnswerId);

            Property(x => x.QuestionAnswerId).HasColumnName(@"QuestionAnswerId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Answer).HasColumnName(@"Answer").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.CorrectAnswer).HasColumnName(@"CorrectAnswer").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            Property(x => x.AnswerAdvice).HasColumnName(@"AnswerAdvice").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // QuizQuestions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class QuizQuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuizQuestion>
    {
        public QuizQuestionConfiguration()
            : this("dbo")
        {
        }

        public QuizQuestionConfiguration(string schema)
        {
            ToTable("QuizQuestions", schema);
            HasKey(x => x.QuestionId);

            Property(x => x.QuestionId).HasColumnName(@"QuestionId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuizId).HasColumnName(@"QuizId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.QuestionText).HasColumnName(@"QuestionText").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.QuestionScoreValue).HasColumnName(@"QuestionScoreValue").HasColumnType("int").IsRequired();
        }
    }

    // QuizResults
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class QuizResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuizResult>
    {
        public QuizResultConfiguration()
            : this("dbo")
        {
        }

        public QuizResultConfiguration(string schema)
        {
            ToTable("QuizResults", schema);
            HasKey(x => x.QuizResultId);

            Property(x => x.QuizResultId).HasColumnName(@"QuizResultId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuizId).HasColumnName(@"QuizId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.QuizResultScore).HasColumnName(@"QuizResultScore").HasColumnType("int").IsOptional();
            Property(x => x.QuizResultPass).HasColumnName(@"QuizResultPass").HasColumnType("char").IsOptional().IsFixedLength().IsUnicode(false).HasMaxLength(1);
        }
    }

    // Quizzes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class QuizzeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Quizze>
    {
        public QuizzeConfiguration()
            : this("dbo")
        {
        }

        public QuizzeConfiguration(string schema)
        {
            ToTable("Quizzes", schema);
            HasKey(x => x.QuizId);

            Property(x => x.QuizId).HasColumnName(@"QuizId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LessonId).HasColumnName(@"LessonId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.QuizTitle).HasColumnName(@"QuizTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.QuizInstructions).HasColumnName(@"QuizInstructions").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.QuizTest).HasColumnName(@"QuizTest").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            Property(x => x.QuizPassMark).HasColumnName(@"QuizPassMark").HasColumnType("int").IsRequired();
        }
    }

    // Resources
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ResourceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Resource>
    {
        public ResourceConfiguration()
            : this("dbo")
        {
        }

        public ResourceConfiguration(string schema)
        {
            ToTable("Resources", schema);
            HasKey(x => x.ResourceId);

            Property(x => x.ResourceId).HasColumnName(@"ResourceId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ResourceName).HasColumnName(@"ResourceName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ResourceType).HasColumnName(@"ResourceType").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            Property(x => x.ResourceDescription).HasColumnName(@"ResourceDescription").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.JourneyId).HasColumnName(@"JourneyId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.LessonId).HasColumnName(@"LessonId").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.UserTitle).HasColumnName(@"UserTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.UserBio).HasColumnName(@"UserBio").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.UserAspirations).HasColumnName(@"UserAspirations").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.UserInspirations).HasColumnName(@"UserInspirations").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.UserXp).HasColumnName(@"UserXp").HasColumnType("int").IsRequired();
            Property(x => x.UserLevel).HasColumnName(@"UserLevel").HasColumnType("int").IsRequired();
        }
    }

    // UserBadges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class UserBadgeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserBadge>
    {
        public UserBadgeConfiguration()
            : this("dbo")
        {
        }

        public UserBadgeConfiguration(string schema)
        {
            ToTable("UserBadges", schema);
            HasKey(x => x.UserBadgeId);

            Property(x => x.UserBadgeId).HasColumnName(@"UserBadgeId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BadgeId).HasColumnName(@"BadgeId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // UserChallenges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class UserChallengeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserChallenge>
    {
        public UserChallengeConfiguration()
            : this("dbo")
        {
        }

        public UserChallengeConfiguration(string schema)
        {
            ToTable("UserChallenges", schema);
            HasKey(x => x.UserChallengeId);

            Property(x => x.UserChallengeId).HasColumnName(@"UserChallengeId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ChallengeId).HasColumnName(@"ChallengeId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateComplete).HasColumnName(@"DateComplete").HasColumnType("datetime").IsRequired();
        }
    }

    // UserJourneys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class UserJourneyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserJourney>
    {
        public UserJourneyConfiguration()
            : this("dbo")
        {
        }

        public UserJourneyConfiguration(string schema)
        {
            ToTable("UserJourneys", schema);
            HasKey(x => x.UserJourneyId);

            Property(x => x.UserJourneyId).HasColumnName(@"UserJourneyId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.JourneyId).HasColumnName(@"JourneyId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.LessonProgressId).HasColumnName(@"LessonProgressId").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    #endregion

}
// </auto-generated>

